import requests
from tabulate import tabulate

# Replace with your Alpha Vantage API key
API_KEY = "YOUR_ALPHA_VANTAGE_API_KEY"

class StockPortfolio:
    def __init__(self):
        self.portfolio = {}  # Dictionary to store stocks: {ticker: {"shares": quantity, "purchase_price": price}}

    def add_stock(self, ticker, shares, purchase_price):
        """Add a stock to the portfolio."""
        if ticker in self.portfolio:
            print(f"{ticker} is already in your portfolio. Use 'update' to modify.")
        else:
            self.portfolio[ticker] = {"shares": shares, "purchase_price": purchase_price}
            print(f"Added {shares} shares of {ticker} to your portfolio.")

    def remove_stock(self, ticker):
        """Remove a stock from the portfolio."""
        if ticker in self.portfolio:
            del self.portfolio[ticker]
            print(f"Removed {ticker} from your portfolio.")
        else:
            print(f"{ticker} is not in your portfolio.")

    def update_stock(self, ticker, shares=None, purchase_price=None):
        """Update the number of shares or purchase price of a stock."""
        if ticker in self.portfolio:
            if shares:
                self.portfolio[ticker]["shares"] = shares
            if purchase_price:
                self.portfolio[ticker]["purchase_price"] = purchase_price
            print(f"Updated {ticker} in your portfolio.")
        else:
            print(f"{ticker} is not in your portfolio.")

    def fetch_stock_data(self, ticker):
        """Fetch real-time stock data using Alpha Vantage API."""
        url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={ticker}&apikey={API_KEY}"
        response = requests.get(url)
        data = response.json()

        if "Global Quote" in data:
            return float(data["Global Quote"]["05. price"])  # Return the latest price
        else:
            print(f"Could not fetch data for {ticker}.")
            return None

    def display_portfolio(self):
        """Display the portfolio with current prices and performance."""
        if not self.portfolio:
            print("Your portfolio is empty.")
            return

        table = []
        total_value = 0
        total_investment = 0

        for ticker, details in self.portfolio.items():
            shares = details["shares"]
            purchase_price = details["purchase_price"]
            current_price = self.fetch_stock_data(ticker)

            if current_price:
                current_value = shares * current_price
                investment_value = shares * purchase_price
                profit_loss = current_value - investment_value
                profit_loss_percent = (profit_loss / investment_value) * 100

                table.append([
                    ticker,
                    shares,
                    f"${purchase_price:.2f}",
                    f"${current_price:.2f}",
                    f"${current_value:.2f}",
                    f"${profit_loss:.2f} ({profit_loss_percent:.2f}%)"
                ])

                total_value += current_value
                total_investment += investment_value

        # Add a summary row
        total_profit_loss = total_value - total_investment
        total_profit_loss_percent = (total_profit_loss / total_investment) * 100
        table.append([
            "TOTAL",
            "",
            "",
            "",
            f"${total_value:.2f}",
            f"${total_profit_loss:.2f} ({total_profit_loss_percent:.2f}%)"
        ])

        # Display the table
        headers = ["Ticker", "Shares", "Purchase Price", "Current Price", "Current Value", "Profit/Loss"]
        print(tabulate(table, headers=headers, tablefmt="pretty"))

def main():
    portfolio = StockPortfolio()

    while True:
        print("\nStock Portfolio Tracker")
        print("1. Add Stock")
        print("2. Remove Stock")
        print("3. Update Stock")
        print("4. View Portfolio")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            ticker = input("Enter the stock ticker (e.g., AAPL): ").upper()
            shares = int(input("Enter the number of shares: "))
            purchase_price = float(input("Enter the purchase price per share: "))
            portfolio.add_stock(ticker, shares, purchase_price)

        elif choice == "2":
            ticker = input("Enter the stock ticker to remove: ").upper()
            portfolio.remove_stock(ticker)

        elif choice == "3":
            ticker = input("Enter the stock ticker to update: ").upper()
            shares = input("Enter the new number of shares (leave blank to skip): ")
            purchase_price = input("Enter the new purchase price (leave blank to skip): ")
            shares = int(shares) if shares else None
            purchase_price = float(purchase_price) if purchase_price else None
            portfolio.update_stock(ticker, shares, purchase_price)

        elif choice == "4":
            portfolio.display_portfolio()

        elif choice == "5":
            print("Exiting the Stock Portfolio Tracker. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
